const fetch = require('node-fetch');

async function testMultiEnv() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏...');
  
  try {
    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    console.log('\nüì§ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–∏...');
    const devResponse = await fetch('http://localhost:3000/run', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        env: 'dev',
        vehicles: ['11'],
        speed: 5,
        duration: 30
      })
    });
    const devResult = await devResponse.json();
    console.log('‚úÖ Dev —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(devResult, null, 2));
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å dev
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å dev –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const devStatusResponse = await fetch('http://localhost:3000/status?env=dev');
    const devStatus = await devStatusResponse.json();
    console.log('‚úÖ Dev —Å—Ç–∞—Ç—É—Å:', JSON.stringify(devStatus, null, 2));
    
    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ demo –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    console.log('\nüì§ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ demo –æ–∫—Ä—É–∂–µ–Ω–∏–∏...');
    const demoResponse = await fetch('http://localhost:3000/run', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        env: 'demo',
        vehicles: ['custom_demo'],
        speed: 3,
        duration: 30,
        vehicleCoords: {
          custom_demo: [
            { lat: 58.03256597, lon: 106.54683029 },
            { lat: 58.03409, lon: 106.5384 }
          ]
        }
      })
    });
    const demoResult = await demoResponse.json();
    console.log('‚úÖ Demo —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(demoResult, null, 2));
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å...');
    const overallStatusResponse = await fetch('http://localhost:3000/status');
    const overallStatus = await overallStatusResponse.json();
    console.log('‚úÖ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:', JSON.stringify(overallStatus, null, 2));
    
    // 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ...');
    const stopDevResponse = await fetch('http://localhost:3000/stop', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ env: 'dev' })
    });
    const stopDevResult = await stopDevResponse.json();
    console.log('‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ dev:', JSON.stringify(stopDevResult, null, 2));
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ dev
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ dev...');
    const finalStatusResponse = await fetch('http://localhost:3000/status');
    const finalStatus = await finalStatusResponse.json();
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', JSON.stringify(finalStatus, null, 2));
    
    // 7. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...');
    const stopAllResponse = await fetch('http://localhost:3000/stop', {
      method: 'POST'
    });
    const stopAllResult = await stopAllResponse.json();
    console.log('‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', JSON.stringify(stopAllResult, null, 2));
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

if (require.main === module) {
  testMultiEnv();
}

module.exports = { testMultiEnv }; 