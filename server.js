const express = require('express');
const { Runner } = require('./runner');
const { VehicleRunner } = require('./vehicleRunner');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

const app = express();
const PORT = 3000;

const wsRegistry = new Map(); // region -> ws
const vehicleRegistry = new Map(); // client -> vehicle
const vehicleRunnerRegistry = new Map(); // env -> vehicleRunner
const runnerRegistry = new Map(); // env -> runner
const notificationTimers = new Map();

app.use(express.json());



function findOperators({ env, operators, allOperators } = {}) {
  const result = [];
  const operatorsDir = path.join(__dirname, `operators_${env}`);
  if (!fs.existsSync(operatorsDir)) return result;
  const files = fs.readdirSync(operatorsDir);
  if (Array.isArray(operators) && operators.length > 0) {
    operators.forEach(name => {
      const fileName = `operator_${name}.json`;
      if (files.includes(fileName)) {
        result.push(name);
      }
    });
    return result;
  }
  if (allOperators) {
    files.forEach(file => {
      const match = file.match(/^operator_(.+)\.json$/);
      if (match && match[1]) result.push(match[1]);
    });
    return result;
  }
  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ –º–∞—Å—Å–∏–≤–∞, –Ω–∏ —Ñ–ª–∞–≥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
  files.forEach(file => {
    const match = file.match(/^operator_(.+)\.json$/);
    if (match && match[1]) result.push(match[1]);
  });
  return result;
}

function findClients({ env, vehicles, allVehicles } = {}) {
  const result = [];
  const vehiclesDir = path.join(__dirname, `vehicles_${env}`);
  if (!fs.existsSync(vehiclesDir)) return result;
  const files = fs.readdirSync(vehiclesDir);
  if (Array.isArray(vehicles) && vehicles.length > 0) {
    vehicles.forEach(name => {
      const fileName = `vehicle_${name}.json`;
      if (files.includes(fileName)) {
        result.push(name);
      }
    });
    return result;
  }
  if (allVehicles) {
    files.forEach(file => {
      const match = file.match(/^vehicle_(.+)\.json$/);
      if (match && match[1]) result.push(match[1]);
    });
    return result;
  }
  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ –º–∞—Å—Å–∏–≤–∞, –Ω–∏ —Ñ–ª–∞–≥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
  files.forEach(file => {
    const match = file.match(/^vehicle_(.+)\.json$/);
    if (match && match[1]) result.push(match[1]);
  });
  return result;
}

const messages = [
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø–æ–∑–¥–∞–ª –Ω–∞ —Å–º–µ–Ω—É",
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ø—É—Ç–∏",
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–±—ã–ª –≤ –≥–µ–æ–∑–æ–Ω—É ‚Ññ2446"
];

app.post('/run', async (req, res) => {
  try {
  const env = req.body.env || 'demo';
    // –ó–∞–≥—Ä—É–∂–∞–µ–º .env.<env> —Ñ–∞–π–ª
    try {
      dotenv.config({ path: `.env.${env}` });
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω .env.${env}`);
    } catch (e) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.${env}:`, e.message);
    }
    const operators = req.body.operators;
    const vehicles = req.body.vehicles;
    const allOperators = req.body.allOperators;
    const allVehicles = req.body.allVehicles;
    const duration = req.body.duration || null;
    const notifications = req.body.notifications;

    const operatorList = findOperators({ env, operators, allOperators });
    const vehicleList = findClients({ env, vehicles, allVehicles });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
    const hasOperators = (operators && operators.length > 0) || allOperators;
    const hasVehicles = (vehicles && vehicles.length > 0) || allVehicles;
    const hasAnySpecific = hasOperators || hasVehicles;
    
    console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:`);
    console.log(`   üì° –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: [${operatorList.join(', ')}]`);
    console.log(`   üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: [${vehicleList.join(', ')}]`);
    console.log(`   üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...`);
    
    if (duration) {
      console.log(`‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫—É–Ω–¥`);
    }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ runner'—ã
  for ( const [ envKey, runner ] of runnerRegistry.entries() ) {
    try {
      console.log( `üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π Runner –¥–ª—è ${envKey}` );
      runner.stopAll();
    } catch ( e ) {
      console.error( `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Runner –¥–ª—è ${envKey}:`, e );
    }
  }
  runnerRegistry.clear();

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ vehicleRunner'—ã
  for ( const [ envKey, vehicleRunner ] of vehicleRunnerRegistry.entries() ) {
    try {
      console.log( `üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π vehicleRunner –¥–ª—è ${envKey}` );
      vehicleRunner.stopAll();
    } catch ( e ) {
      console.error( `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ vehicleRunner –¥–ª—è ${envKey}:`, e );
    }
  }
  vehicleRunnerRegistry.clear();

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ ws
  for (const ws of wsRegistry.values()) {
    try {
      ws.close();
    } catch (e) {
      // ignore
    }
  }
  wsRegistry.clear();

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
  for (const vehicle of vehicleRegistry.values()) {
    try {
      vehicle.stop();
    } catch (e) {
      // ignore
    }
  }
  vehicleRegistry.clear();

  const results = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    try {
      const baseUrl = process.env.BASE_URL;
      if (baseUrl) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã
        const currentShiftsResponse = await fetch(`${baseUrl}/api/units/shifts/current`, {
          headers: {
            'Accept': 'application/json',
            'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
          }
        });
        const currentShiftsData = await currentShiftsResponse.text();
        console.log(`üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω: ${currentShiftsResponse.status}, –¥–∞–Ω–Ω—ã–µ: ${currentShiftsData.substring(0, 100)}...`);
        
        if (currentShiftsResponse.status === 404 || !currentShiftsData || currentShiftsData === '[]') {
          console.log('‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ...');
          
          // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω
          const templatesResponse = await fetch(`${baseUrl}/api/units/shift-templates`, {
            headers: {
              'Accept': 'application/json',
              'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
            }
          });
          console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: ${templatesResponse.status}`);
          
          if (templatesResponse.ok) {
            const templatesText = await templatesResponse.text();
            console.log(`üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${templatesText.substring(0, 200)}...`);
            
            let templates;
            try {
              templates = JSON.parse(templatesText);
            } catch (e) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}`);
              templates = null;
            }
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templates && templates.items ? templates.items.length : 0}`);
            
            if (templates && templates.items && templates.items.length > 0) {
              // –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
              const today = new Date().toISOString().split('T')[0]; // yyyy-mm-dd
              console.log(`üìÖ –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: ${today}`);
              
              for (const template of templates.items) {
                console.log(`üîÑ –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: ${template.id}`);
                const shiftData = {
                  shift_template_id: template.id,
                  shift_date: today
                };
                
                const createShiftResponse = await fetch(`${baseUrl}/api/units/shifts`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
                  },
                  body: JSON.stringify(shiftData)
                });
                
                const createShiftData = await createShiftResponse.text();
                console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã ${template.id}: ${createShiftResponse.status}, –æ—Ç–≤–µ—Ç: ${createShiftData.substring(0, 100)}...`);
                
                if (createShiftResponse.ok) {
                  console.log(`‚úÖ –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}`);
                } else {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}: ${createShiftResponse.status} - ${createShiftData}`);
                }
              }
            } else {
              console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            }
          } else {
            const errorData = await templatesResponse.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–º–µ–Ω: ${templatesResponse.status} - ${errorData}`);
          }
        } else {
          console.log('‚úÖ –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω:', error.message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ notifications === true
    if (notifications) {
      const baseUrl = process.env.BASE_URL;
      if (!baseUrl) {
        console.error('‚ùå BASE_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ .env');
      } else {
        const notificationUrl = `${baseUrl}/api/streamer/notifications/message`;
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É
        const randomIndex = Math.floor(Math.random() * messages.length);
        const notificationBody = {
          id: "42660254-8dc0-4e85-a67a-5b8d580b2c20",
          type: "operators_late",
          text: messages[randomIndex]
        };
        fetch(notificationUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(notificationBody)
        })
        .then(response => response.text())
        .then(data => {
          console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
        })
        .catch(err => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
        });

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ env, –µ—Å–ª–∏ –±—ã–ª
        if (notificationTimers.has(env)) {
          clearInterval(notificationTimers.get(env).interval);
          if (notificationTimers.get(env).timeout) {
            clearTimeout(notificationTimers.get(env).timeout);
          }
          notificationTimers.delete(env);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        const interval = setInterval(() => {
          const randomIndex = Math.floor(Math.random() * messages.length);
          const notificationBody = {
            id: "42660254-8dc0-4e85-a67a-5b8d580b2c20",
            type: "operators_late",
            text: messages[randomIndex]
          };
          fetch(notificationUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(notificationBody)
          })
          .then(response => response.text())
          .then(data => {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–∞–π–º–µ—Ä):', data);
          })
          .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–∞–π–º–µ—Ä):', err);
          });
        }, 3 * 60 * 1000); // 3 –º–∏–Ω—É—Ç—ã

        let timeout = null;
        if (duration) {
          timeout = setTimeout(() => {
            clearInterval(interval);
            notificationTimers.delete(env);
            console.log(`–¢–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è env=${env} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ duration`);
          }, duration * 1000);
        }
        notificationTimers.set(env, { interval, timeout });
      }
    }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å WebSocket –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  if (operatorList && operatorList.length > 0 && (hasAnySpecific ? hasOperators : true)) {
    const runner = new Runner(operatorList, env, { wsRegistry, timeout: duration });
    runnerRegistry.set( env, runner );
    try {
      const statuses = await runner.run();
      results.operators = statuses;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Runner:', err);
      results.operators = { error: err.message };
    }
  } else {
    results.operators = [];
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å HTTP vehicle
  if (vehicleList && vehicleList.length > 0 && (hasAnySpecific ? hasVehicles : true)) {
    const vehicleRunner = new VehicleRunner( vehicleList, env, {
      duration: duration || 300,
      vehicleRegistry: vehicleRegistry
    } );
    vehicleRunnerRegistry.set( env, vehicleRunner );
    try {
      const statuses = await vehicleRunner.run();
      results.vehicles = statuses;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ VehicleRunner:', err);
      results.vehicles = { error: err.message };
    }
  } else {
    results.vehicles = [];
  }

  res.json(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /run:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.get('/status', (req, res) => {
  try {
    let status = 'stopped';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ª—é–±–æ–≥–æ —Ç–∏–ø–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–æ
    if (runnerRegistry.size > 0 || vehicleRunnerRegistry.size > 0 || wsRegistry.size > 0) {
      status = 'running';
    }

    res.json({ status });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /status:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.post( '/stop', async ( req, res ) => {
  try {
  console.log( 'üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...' );

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ runner'—ã
  for ( const [ envKey, runner ] of runnerRegistry.entries() ) {
    try {
      console.log( `üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Runner –¥–ª—è ${envKey}` );
      runner.stopAll();
    } catch ( e ) {
      console.error( `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Runner –¥–ª—è ${envKey}:`, e );
    }
  }
  runnerRegistry.clear();

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ vehicleRunner'—ã
  for ( const [ envKey, vehicleRunner ] of vehicleRunnerRegistry.entries() ) {
    try {
      console.log( `üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vehicleRunner –¥–ª—è ${envKey}` );
      vehicleRunner.stopAll();
    } catch ( e ) {
      console.error( `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ vehicleRunner –¥–ª—è ${envKey}:`, e );
    }
  }
  vehicleRunnerRegistry.clear();

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ ws
  for ( const ws of wsRegistry.values() ) {
    try {
      ws.close();
    } catch ( e ) {
      // ignore
    }
  }
  wsRegistry.clear();

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    for ( const vehicle of vehicleRegistry.values() ) {
    try {
        vehicle.stop();
    } catch ( e ) {
      // ignore
    }
  }
    vehicleRegistry.clear();

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for (const { interval, timeout } of notificationTimers.values()) {
      clearInterval(interval);
      if (timeout) clearTimeout(timeout);
    }
    notificationTimers.clear();

  console.log( '‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' );
  res.json( { status: 'stopped', message: '–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' } );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /stop:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
} );



app.listen(PORT, () => {
  console.log(`Server started on http://localhost:${PORT}`);
}); 