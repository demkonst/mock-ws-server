const express = require('express');
const { Runner } = require('./runner');
const { VehicleRunner } = require('./vehicleRunner');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const swaggerUi = require('swagger-ui-express');
const specs = require('./swagger');

const app = express();
const PORT = 3000;

// –†–µ–µ—Å—Ç—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ env
const wsRegistry = new Map(); // env -> Map(region -> ws)
const vehicleRegistry = new Map(); // env -> Map(client -> vehicle)
const vehicleRunnerRegistry = new Map(); // env -> vehicleRunner
const runnerRegistry = new Map(); // env -> runner
const notificationTimers = new Map(); // env -> timer

app.use(express.json());

// Swagger UI
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));



function findOperators({ env, operators, allOperators } = {}) {
  const result = [];
  const operatorsDir = path.join(__dirname, `operators_${env}`);
  if (!fs.existsSync(operatorsDir)) return result;
  const files = fs.readdirSync(operatorsDir);
  if (Array.isArray(operators) && operators.length > 0) {
    operators.forEach(name => {
      const fileName = `operator_${name}.json`;
      if (files.includes(fileName)) {
        result.push(name);
      }
    });
    return result;
  }
  if (allOperators) {
    files.forEach(file => {
      const match = file.match(/^operator_(.+)\.json$/);
      if (match && match[1]) result.push(match[1]);
    });
    return result;
  }
  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ –º–∞—Å—Å–∏–≤–∞, –Ω–∏ —Ñ–ª–∞–≥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
  files.forEach(file => {
    const match = file.match(/^operator_(.+)\.json$/);
    if (match && match[1]) result.push(match[1]);
  });
  return result;
}

function findClients({ env, vehicles, allVehicles } = {}) {
  const result = [];
  const vehiclesDir = path.join(__dirname, `vehicles_${env}`);
  if (!fs.existsSync(vehiclesDir)) return result;
  const files = fs.readdirSync(vehiclesDir);
  if (Array.isArray(vehicles) && vehicles.length > 0) {
    vehicles.forEach(name => {
      const fileName = `vehicle_${name}.json`;
      if (files.includes(fileName)) {
        result.push(name);
      }
    });
    return result;
  }
  if (allVehicles) {
    files.forEach(file => {
      const match = file.match(/^vehicle_(.+)\.json$/);
      if (match && match[1]) result.push(match[1]);
    });
    return result;
  }
  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ –º–∞—Å—Å–∏–≤–∞, –Ω–∏ —Ñ–ª–∞–≥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
  files.forEach(file => {
    const match = file.match(/^vehicle_(.+)\.json$/);
    if (match && match[1]) result.push(match[1]);
  });
  return result;
}

const messages = [
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø–æ–∑–¥–∞–ª –Ω–∞ —Å–º–µ–Ω—É",
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ø—É—Ç–∏",
  "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–±—ã–ª –≤ –≥–µ–æ–∑–æ–Ω—É ‚Ññ2446"
];

/**
 * @swagger
 * /run:
 *   post:
 *     summary: –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏/–∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
 *     description: –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ HTTP POST –∑–∞–ø—Ä–æ—Å—ã
 *     tags: [Simulation]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RunRequest'
 *           examples:
 *             basic:
 *               summary: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫
 *               value:
 *                 env: "dev"
 *                 vehicles: ["11", "12"]
 *                 speed: 8
 *                 duration: 200
 *             custom_coords:
 *               summary: –ó–∞–ø—É—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
 *               value:
 *                 env: "dev"
 *                 vehicles: ["custom_route"]
 *                 speed: 5
 *                 vehicleCoords:
 *                   custom_route:
 *                     coords:
 *                       - [106.54683029, 58.03256597]
 *                       - [106.5384, 58.03409]
 *                       - [106.53784625, 58.03890375]
 *                     client: 123456
 *             all_processes:
 *               summary: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 *               value:
 *                 env: "dev"
 *                 allOperators: true
 *                 allVehicles: true
 *                 notifications: true
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/RunResponse'
 *             examples:
 *               success:
 *                 summary: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
 *                 value:
 *                   operators:
 *                     - { client: "01", status: "ready" }
 *                     - { client: "02", status: "ready" }
 *                   vehicles:
 *                     - { client: "11", status: "ready" }
 *                     - { client: "12", status: "ready" }
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
app.post('/run', async (req, res) => {
  try {
  const env = req.body.env || 'dev';
    // –ó–∞–≥—Ä—É–∂–∞–µ–º .env.<env> —Ñ–∞–π–ª
    try {
      dotenv.config({ path: `.env.${env}` });
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω .env.${env}`);
    } catch (e) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.${env}:`, e.message);
    }
    const operators = req.body.operators;
    const vehicles = req.body.vehicles;
    const allOperators = req.body.allOperators;
    const allVehicles = req.body.allVehicles;
    const duration = req.body.duration || null;
    const notifications = req.body.notifications;
    const vehicleCoords = req.body.vehicleCoords; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è vehicles –≤ —Ñ–æ—Ä–º–∞—Ç–µ { "vehicle_name": [{ lat, lon }, ...] }
    const operatorCoords = req.body.operatorCoords; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è operators –≤ —Ñ–æ—Ä–º–∞—Ç–µ { "operator_name": [{ lon, lat }, ...] }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
    const hasOperators = (operators && operators.length > 0) || allOperators;
    const hasVehicles = (vehicles && vehicles.length > 0) || allVehicles;
    const hasVehicleCoords = vehicleCoords && Object.keys(vehicleCoords).length > 0;
    const hasOperatorCoords = operatorCoords && Object.keys(operatorCoords).length > 0;
    const hasAnySpecific = hasOperators || hasVehicles || hasVehicleCoords || hasOperatorCoords;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ allOperators/allVehicles
    const shouldRunOperators = hasOperatorCoords || hasOperators;
    const shouldRunVehicles = hasVehicleCoords || hasVehicles;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    let operatorList = [];
    let vehicleList = [];
    
    if (!hasOperatorCoords) {
      operatorList = findOperators({ env, operators, allOperators });
    }
    
    if (!hasVehicleCoords) {
      vehicleList = findClients({ env, vehicles, allVehicles });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if (hasOperatorCoords) {
      operatorList = [];
    }
    
    if (hasVehicleCoords) {
      vehicleList = [];
    }
    
    console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:`);
    console.log(`   üì° –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: [${operatorList.join(', ')}]`);
    console.log(`   üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: [${vehicleList.join(', ')}]`);
    console.log(`   üîÑ hasOperatorCoords: ${hasOperatorCoords}, hasVehicleCoords: ${hasVehicleCoords}`);
    console.log(`   üîÑ hasOperators: ${hasOperators}, hasVehicles: ${hasVehicles}`);
    console.log(`   üîÑ hasAnySpecific: ${hasAnySpecific}`);
    console.log(`   üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...`);
    
    if (duration) {
      console.log(`‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫—É–Ω–¥`);
    }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ env
  console.log(`üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è env: ${env}`);
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π runner –¥–ª—è —ç—Ç–æ–≥–æ env
  const oldRunner = runnerRegistry.get(env);
  if (oldRunner) {
    try {
      console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π Runner –¥–ª—è ${env}`);
      oldRunner.stopAll();
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Runner –¥–ª—è ${env}:`, e);
    }
    runnerRegistry.delete(env);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π vehicleRunner –¥–ª—è —ç—Ç–æ–≥–æ env
  const oldVehicleRunner = vehicleRunnerRegistry.get(env);
  if (oldVehicleRunner) {
    try {
      console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π vehicleRunner –¥–ª—è ${env}`);
      oldVehicleRunner.stopAll();
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ vehicleRunner –¥–ª—è ${env}:`, e);
    }
    vehicleRunnerRegistry.delete(env);
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ç–∞—Ä—ã–µ ws –¥–ª—è —ç—Ç–æ–≥–æ env
  const envWsRegistry = wsRegistry.get(env);
  if (envWsRegistry) {
    for (const ws of envWsRegistry.values()) {
      try {
        ws.close();
      } catch (e) {
        // ignore
      }
    }
    wsRegistry.delete(env);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ env
  const envVehicleRegistry = vehicleRegistry.get(env);
  if (envVehicleRegistry) {
    for (const vehicle of envVehicleRegistry.values()) {
      try {
        vehicle.stop();
      } catch (e) {
        // ignore
      }
    }
    vehicleRegistry.delete(env);
  }

  const results = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    try {
      const baseUrl = process.env.BASE_URL;
      if (baseUrl) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã
        const currentShiftsResponse = await fetch(`${baseUrl}/api/units/shifts/current`, {
          headers: {
            'Accept': 'application/json',
            'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
          }
        });
        const currentShiftsData = await currentShiftsResponse.text();
        console.log(`üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω: ${currentShiftsResponse.status}, –¥–∞–Ω–Ω—ã–µ: ${currentShiftsData.substring(0, 100)}...`);
        
        if (currentShiftsResponse.status === 404 || !currentShiftsData || currentShiftsData === '[]') {
          console.log('‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ...');
          
          // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω
          const templatesResponse = await fetch(`${baseUrl}/api/units/shift-templates`, {
            headers: {
              'Accept': 'application/json',
              'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
            }
          });
          console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: ${templatesResponse.status}`);
          
          if (templatesResponse.ok) {
            const templatesText = await templatesResponse.text();
            console.log(`üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${templatesText.substring(0, 200)}...`);
            
            let templates;
            try {
              templates = JSON.parse(templatesText);
            } catch (e) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}`);
              templates = null;
            }
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templates && templates.items ? templates.items.length : 0}`);
            
            if (templates && templates.items && templates.items.length > 0) {
              // –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
              const today = new Date().toISOString().split('T')[0]; // yyyy-mm-dd
              console.log(`üìÖ –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: ${today}`);
              
              for (const template of templates.items) {
                console.log(`üîÑ –°–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: ${template.id}`);
                const shiftData = {
                  shift_template_id: template.id,
                  shift_date: today
                };
                
                const createShiftResponse = await fetch(`${baseUrl}/api/units/shifts`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': 'Basic aW5rLW1vbjppbmttb25pdG9yaW5n'
                  },
                  body: JSON.stringify(shiftData)
                });
                
                const createShiftData = await createShiftResponse.text();
                console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã ${template.id}: ${createShiftResponse.status}, –æ—Ç–≤–µ—Ç: ${createShiftData.substring(0, 100)}...`);
                
                if (createShiftResponse.ok) {
                  console.log(`‚úÖ –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}`);
                } else {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}: ${createShiftResponse.status} - ${createShiftData}`);
                }
              }
            } else {
              console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            }
          } else {
            const errorData = await templatesResponse.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–º–µ–Ω: ${templatesResponse.status} - ${errorData}`);
          }
        } else {
          console.log('‚úÖ –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω:', error.message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ notifications === true
    if (notifications) {
      const baseUrl = process.env.BASE_URL;
      if (!baseUrl) {
        console.error('‚ùå BASE_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ .env');
      } else {
        const notificationUrl = `${baseUrl}/api/streamer/notifications/message`;
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É
        const randomIndex = Math.floor(Math.random() * messages.length);
        const notificationBody = {
          id: "42660254-8dc0-4e85-a67a-5b8d580b2c20",
          type: "operators_late",
          text: messages[randomIndex]
        };
        fetch(notificationUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(notificationBody)
        })
        .then(response => response.text())
        .then(data => {
          console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
        })
        .catch(err => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
        });

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ env, –µ—Å–ª–∏ –±—ã–ª
        if (notificationTimers.has(env)) {
          clearInterval(notificationTimers.get(env).interval);
          if (notificationTimers.get(env).timeout) {
            clearTimeout(notificationTimers.get(env).timeout);
          }
          notificationTimers.delete(env);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        const interval = setInterval(() => {
          const randomIndex = Math.floor(Math.random() * messages.length);
          const notificationBody = {
            id: "42660254-8dc0-4e85-a67a-5b8d580b2c20",
            type: "operators_late",
            text: messages[randomIndex]
          };
          fetch(notificationUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(notificationBody)
          })
          .then(response => response.text())
          .then(data => {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–∞–π–º–µ—Ä):', data);
          })
          .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–∞–π–º–µ—Ä):', err);
          });
        }, 3 * 60 * 1000); // 3 –º–∏–Ω—É—Ç—ã

        let timeout = null;
        if (duration) {
          timeout = setTimeout(() => {
            clearInterval(interval);
            notificationTimers.delete(env);
            console.log(`–¢–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è env=${env} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ duration`);
          }, duration * 1000);
        }
        notificationTimers.set(env, { interval, timeout });
      }
    }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å WebSocket –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  let finalOperatorList = [];
  
  if (hasOperatorCoords) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
    const customOperatorNames = Object.keys(operatorCoords);
    finalOperatorList = customOperatorNames;
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: [${customOperatorNames.join(', ')}]`);
  } else if (operatorList && operatorList.length > 0) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    finalOperatorList = operatorList;
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: [${operatorList.join(', ')}]`);
  }
  
  if (finalOperatorList.length > 0) {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä ws –¥–ª—è —ç—Ç–æ–≥–æ env, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!wsRegistry.has(env)) {
      wsRegistry.set(env, new Map());
    }
    
    const runner = new Runner(finalOperatorList, env, { 
      wsRegistry: wsRegistry.get(env), 
      timeout: duration,
      operatorCoords: operatorCoords // –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    });
    runnerRegistry.set(env, runner);
    try {
      const statuses = await runner.run();
      results.operators = statuses;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Runner:', err);
      results.operators = { error: err.message };
    }
  } else {
    results.operators = [];
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å HTTP vehicle
  let finalVehicleList = [];
  
  if (hasVehicleCoords) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
    const customVehicleNames = Object.keys(vehicleCoords);
    finalVehicleList = customVehicleNames;
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: [${customVehicleNames.join(', ')}]`);
  } else if (vehicleList && vehicleList.length > 0) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ vehicles
    finalVehicleList = vehicleList;
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ vehicles: [${vehicleList.join(', ')}]`);
  }
  
  if (finalVehicleList.length > 0) {
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä vehicles –¥–ª—è —ç—Ç–æ–≥–æ env, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!vehicleRegistry.has(env)) {
      vehicleRegistry.set(env, new Map());
    }
    
    const vehicleRunner = new VehicleRunner( finalVehicleList, env, {
      duration: duration || 300,
      vehicleRegistry: vehicleRegistry.get(env),
      speed: req.body.speed, // –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
      vehicleCoords: vehicleCoords, // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      interpolate: req.body.interpolate !== false // –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } );
    vehicleRunnerRegistry.set( env, vehicleRunner );
    try {
      const statuses = await vehicleRunner.run();
      results.vehicles = statuses;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ VehicleRunner:', err);
      results.vehicles = { error: err.message };
    }
  } else {
    results.vehicles = [];
  }

  res.json(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /run:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * @swagger
 * /status:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 *     tags: [Status]
 *     parameters:
 *       - in: query
 *         name: env
 *         schema:
 *           type: string
 *           enum: [dev, demo, stage]
 *         description: –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å)
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               oneOf:
 *                 - $ref: '#/components/schemas/StatusResponse'
 *                 - $ref: '#/components/schemas/EnvStatusResponse'
 *             examples:
 *               specific_env:
 *                 summary: –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 *                 value: { "status": "running" }
 *               all_envs:
 *                 summary: –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
 *                 value:
 *                   - { "env": "dev", "status": "running" }
 *                   - { "env": "demo", "status": "stopped" }
 *                   - { "env": "stage", "status": "running" }
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
app.get('/status', (req, res) => {
  try {
    const targetEnv = req.query.env; // –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω env, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ
    
    if (targetEnv) {
      // –°—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
      const hasRunner = runnerRegistry.has(targetEnv);
      const hasVehicleRunner = vehicleRunnerRegistry.has(targetEnv);
      const hasWs = wsRegistry.has(targetEnv) && wsRegistry.get(targetEnv).size > 0;
      const hasVehicles = vehicleRegistry.has(targetEnv) && vehicleRegistry.get(targetEnv).size > 0;
      
      const status = (hasRunner || hasVehicleRunner || hasWs || hasVehicles) ? 'running' : 'stopped';
      
      res.json({ status });
    } else {
      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö env - –º–∞—Å—Å–∏–≤ { env, status }
      const envStatuses = [];
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ env –∏–∑ –≤—Å–µ—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤
      const allEnvs = new Set([
        ...runnerRegistry.keys(),
        ...vehicleRunnerRegistry.keys(),
        ...wsRegistry.keys(),
        ...vehicleRegistry.keys()
      ]);
      
      for (const env of allEnvs) {
        const hasRunner = runnerRegistry.has(env);
        const hasVehicleRunner = vehicleRunnerRegistry.has(env);
        const hasWs = wsRegistry.has(env) && wsRegistry.get(env).size > 0;
        const hasVehicles = vehicleRegistry.has(env) && vehicleRegistry.get(env).size > 0;
        
        const status = (hasRunner || hasVehicleRunner || hasWs || hasVehicles) ? 'running' : 'stopped';
        envStatuses.push({ env, status });
      }
      
      res.json(envStatuses);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /status:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * @swagger
 * /stop:
 *   post:
 *     summary: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 *     description: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 *     tags: [Control]
 *     requestBody:
 *       required: false
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/StopRequest'
 *           examples:
 *             stop_all:
 *               summary: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
 *               value: {}
 *             stop_env:
 *               summary: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
 *               value: { "env": "dev" }
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/StopResponse'
 *             examples:
 *               success:
 *                 summary: –£—Å–ø–µ—à–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
 *                 value:
 *                   status: "stopped"
 *                   message: "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
app.post( '/stop', async ( req, res ) => {
  try {
    const targetEnv = req.body.env; // –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω env, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    
    if (targetEnv) {
      console.log(`üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è env: ${targetEnv}`);
      
      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å runner –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env
      const runner = runnerRegistry.get(targetEnv);
      if (runner) {
        try {
          console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Runner –¥–ª—è ${targetEnv}`);
          runner.stopAll();
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Runner –¥–ª—è ${targetEnv}:`, e);
        }
        runnerRegistry.delete(targetEnv);
      }

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vehicleRunner –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env
      const vehicleRunner = vehicleRunnerRegistry.get(targetEnv);
      if (vehicleRunner) {
        try {
          console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vehicleRunner –¥–ª—è ${targetEnv}`);
          vehicleRunner.stopAll();
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ vehicleRunner –¥–ª—è ${targetEnv}:`, e);
        }
        vehicleRunnerRegistry.delete(targetEnv);
      }

      // –ó–∞–≤–µ—Ä—à–∏—Ç—å ws –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env
      const envWsRegistry = wsRegistry.get(targetEnv);
      if (envWsRegistry) {
        for (const ws of envWsRegistry.values()) {
          try {
            ws.close();
          } catch (e) {
            // ignore
          }
        }
        wsRegistry.delete(targetEnv);
      }

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env
      const envVehicleRegistry = vehicleRegistry.get(targetEnv);
      if (envVehicleRegistry) {
        for (const vehicle of envVehicleRegistry.values()) {
          try {
            vehicle.stop();
          } catch (e) {
            // ignore
          }
        }
        vehicleRegistry.delete(targetEnv);
      }

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ env
      const notificationTimer = notificationTimers.get(targetEnv);
      if (notificationTimer) {
        clearInterval(notificationTimer.interval);
        if (notificationTimer.timeout) clearTimeout(notificationTimer.timeout);
        notificationTimers.delete(targetEnv);
      }

      console.log(`‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è env ${targetEnv} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
      res.json({ status: 'stopped', message: `–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è env ${targetEnv} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã` });
      
    } else {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ runner'—ã
      for (const [envKey, runner] of runnerRegistry.entries()) {
        try {
          console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Runner –¥–ª—è ${envKey}`);
          runner.stopAll();
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Runner –¥–ª—è ${envKey}:`, e);
        }
      }
      runnerRegistry.clear();

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ vehicleRunner'—ã
      for (const [envKey, vehicleRunner] of vehicleRunnerRegistry.entries()) {
        try {
          console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vehicleRunner –¥–ª—è ${envKey}`);
          vehicleRunner.stopAll();
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ vehicleRunner –¥–ª—è ${envKey}:`, e);
        }
      }
      vehicleRunnerRegistry.clear();

      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ ws
      for (const envWsRegistry of wsRegistry.values()) {
        for (const ws of envWsRegistry.values()) {
          try {
            ws.close();
          } catch (e) {
            // ignore
          }
        }
      }
      wsRegistry.clear();

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
      for (const envVehicleRegistry of vehicleRegistry.values()) {
        for (const vehicle of envVehicleRegistry.values()) {
          try {
            vehicle.stop();
          } catch (e) {
            // ignore
          }
        }
      }
      vehicleRegistry.clear();

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      for (const { interval, timeout } of notificationTimers.values()) {
        clearInterval(interval);
        if (timeout) clearTimeout(timeout);
      }
      notificationTimers.clear();

      console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      res.json({ status: 'stopped', message: '–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ /stop:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
} );



app.listen(PORT, () => {
  console.log(`Server started on http://localhost:${PORT}`);
}); 