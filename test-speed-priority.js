const { interpolateCoordinates, calculateDistance } = require('./vehicle');

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
const testWaypoints = [
  { lat: 58.03256597, lon: 106.54683029 },
  { lat: 58.03409, lon: 106.5384 },
  { lat: 58.03890375, lon: 106.53784625 }
];

console.log('üöÄ –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏');
console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏:', testWaypoints.length);

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const scenarios = [
  { name: '–§–∞–π–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (5 –º/—Å)', speed: 5 },
  { name: '–ó–∞–ø—Ä–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (15 –º/—Å)', speed: 15 },
  { name: '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (10 –º/—Å)', speed: 10 }
];

scenarios.forEach(scenario => {
  console.log(`\nüîÑ ${scenario.name}:`);
  
  const interpolatedCoords = interpolateCoordinates(testWaypoints, scenario.speed, 1000);
  
  console.log(`üìä –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${interpolatedCoords.length}`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${(calculateDistance(testWaypoints[0], testWaypoints[1]) / scenario.speed).toFixed(1)}—Å`);
  console.log(`üöó –°–∫–æ—Ä–æ—Å—Ç—å: ${scenario.speed} –º/—Å (${(scenario.speed * 3.6).toFixed(1)} –∫–º/—á)`);
});

console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');
console.log('\nüìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏:');
console.log('1. –ü–∞—Ä–∞–º–µ—Ç—Ä speed –≤ –∑–∞–ø—Ä–æ—Å–µ (–≤—ã—Å—à–∏–π)');
console.log('2. –ü–∞—Ä–∞–º–µ—Ç—Ä speed –≤ JSON —Ñ–∞–π–ª–µ (—Å—Ä–µ–¥–Ω–∏–π)');
console.log('3. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º/—Å (–Ω–∏–∑—à–∏–π)'); 