// –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
let fetch;
try {
  fetch = require('node-fetch');
} catch (e) {
  fetch = global.fetch;
}

async function testOperatorCustomCoords() {
  const baseUrl = 'http://localhost:3000';
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  const test1 = {
    env: 'dev',
    duration: 10,
    operatorCoords: {
      'simple_operator': [
        [106.54683029, 58.03256597],
        [106.5384, 58.03409],
        [106.53784625, 58.03890375]
      ]
    }
  };
  
  try {
    const response1 = await fetch(`${baseUrl}/run`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(test1)
    });
    const result1 = await response1.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result1, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  await fetch(`${baseUrl}/stop`, { method: 'POST' });
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –¢–µ—Å—Ç 2: –° operator_id
  console.log('\nüìã –¢–µ—Å—Ç 2: –° operator_id');
  const test2 = {
    env: 'dev',
    duration: 10,
    operatorCoords: {
      'custom_operator': {
        coords: [
          [106.54683029, 58.03256597],
          [106.5384, 58.03409],
          [106.53784625, 58.03890375]
        ],
        operator_id: 123456
      }
    }
  };
  
  try {
    const response2 = await fetch(`${baseUrl}/run`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(test2)
    });
    const result2 = await response2.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result2, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  await fetch(`${baseUrl}/stop`, { method: 'POST' });
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

testOperatorCustomCoords().catch(console.error); 