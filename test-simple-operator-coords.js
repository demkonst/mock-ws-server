// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
const fetch = require('node-fetch');

async function testSimpleOperatorCoords() {
  const baseUrl = 'http://localhost:3000';
  
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...\n');
  
  // –¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  console.log('üìã –¢–µ—Å—Ç: –¢–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
  const test = {
    env: 'dev',
    duration: 10,
    operatorCoords: {
      'simple_operator': [
        [106.54683029, 58.03256597],
        [106.5384, 58.03409],
        [106.53784625, 58.03890375]
      ]
    }
  };
  
  try {
    const response = await fetch(`${baseUrl}/run`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(test)
    });
    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  await fetch(`${baseUrl}/stop`, { method: 'POST' });
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

testSimpleOperatorCoords().catch(console.error); 