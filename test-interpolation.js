const { interpolateCoordinates, calculateDistance } = require('./vehicle');

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç)
const testWaypoints = [
  { lat: 58.03256597, lon: 106.54683029 },
  { lat: 58.03409, lon: 106.5384 },
  { lat: 58.03890375, lon: 106.53784625 }
];

console.log('üöÄ –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏:', testWaypoints.length);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–æ—Ä–æ—Å—Ç—è–º–∏
const speeds = [2, 5, 10, 20]; // –º/—Å

speeds.forEach(speed => {
  console.log(`\nüîÑ –¢–µ—Å—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é ${speed} –º/—Å (${(speed * 3.6).toFixed(1)} –∫–º/—á):`);
  
  const interpolatedCoords = interpolateCoordinates(testWaypoints, speed, 1000);
  
  console.log(`üìä –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${interpolatedCoords.length}`);
  console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: ${calculateDistance(testWaypoints[0], testWaypoints[1]).toFixed(1)}–º`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${(calculateDistance(testWaypoints[0], testWaypoints[1]) / speed).toFixed(1)}—Å`);
  
  console.log('üìç –ü–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏:');
  interpolatedCoords.slice(0, 3).forEach((coord, index) => {
    console.log(`  ${index + 1}. lat: ${coord.lat.toFixed(8)}, lon: ${coord.lon.toFixed(8)}`);
  });
});

console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!'); 