// –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
const fetch = require('node-fetch');

async function testCustomParameters() {
  const baseUrl = 'http://localhost:3000';
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...\n');
  
  // –¢–µ—Å—Ç 1: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  console.log('üìã –¢–µ—Å—Ç 1: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
  const test1 = {
    env: 'dev',
    duration: 10,
    operatorCoords: {
      'fast_operator': {
        coords: [
          [106.54683029, 58.03256597],
          [106.5384, 58.03409],
          [106.53784625, 58.03890375]
        ],
        operator_id: 123456,
        speed: 80, // –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        course: 45, // –∫—É—Ä—Å 45 –≥—Ä–∞–¥—É—Å–æ–≤
        altitude: 20, // –≤—ã—Å–æ—Ç–∞ 20 –º–µ—Ç—Ä–æ–≤
        delay: 1000, // –±—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        interpolate: true
      }
    }
  };
  
  try {
    const response1 = await fetch(`${baseUrl}/run`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(test1)
    });
    const result1 = await response1.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result1, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  await fetch(`${baseUrl}/stop`, { method: 'POST' });
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –¢–µ—Å—Ç 2: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
  console.log('\nüìã –¢–µ—Å—Ç 2: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞');
  const test2 = {
    env: 'dev',
    duration: 10,
    vehicleCoords: {
      'fast_vehicle': {
        coords: [
          [106.54683029, 58.03256597],
          [106.5384, 58.03409],
          [106.53784625, 58.03890375]
        ],
        client: 123456,
        speed: 25, // –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (25 –º/—Å = 90 –∫–º/—á)
        interpolate: true
      }
    }
  };
  
  try {
    const response2 = await fetch(`${baseUrl}/run`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(test2)
    });
    const result2 = await response2.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result2, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  await fetch(`${baseUrl}/stop`, { method: 'POST' });
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

testCustomParameters().catch(console.error); 