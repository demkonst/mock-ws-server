// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch –¥–ª—è Node.js 18+ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch
let fetch;
if (typeof globalThis.fetch === 'function') {
  fetch = globalThis.fetch;
} else {
  fetch = require('node-fetch');
}

async function testVehicleInterpolation() {
  console.log('üß™ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...');
  
  try {
    // 1. –¢–µ—Å—Ç —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
    console.log('\nüì§ –¢–µ—Å—Ç 1: Vehicle —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π...');
    const test1Response = await fetch('http://localhost:3000/run', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        env: 'dev',
        vehicles: ['with_interpolation'],
        duration: 5
      })
    });
    const test1Result = await test1Response.json();
    console.log('‚úÖ –¢–µ—Å—Ç 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(test1Result, null, 2));
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç
    await fetch('http://localhost:3000/stop', { method: 'POST' });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. –¢–µ—Å—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    console.log('\nüì§ –¢–µ—Å—Ç 2: Vehicle –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏...');
    const test2Response = await fetch('http://localhost:3000/run', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        env: 'dev',
        vehicles: ['without_interpolation'],
        duration: 5
      })
    });
    const test2Result = await test2Response.json();
    console.log('‚úÖ –¢–µ—Å—Ç 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(test2Result, null, 2));
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç
    await fetch('http://localhost:3000/stop', { method: 'POST' });
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:');
    console.log('- –° –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π: –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫, –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ');
    console.log('- –ë–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: —Ç–æ–ª—å–∫–æ waypoints, —Ç–æ—á–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

if (require.main === module) {
  testVehicleInterpolation();
}

module.exports = { testVehicleInterpolation }; 