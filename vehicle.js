const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');
const moment = require('moment');
const dotenv = require('dotenv');

function loadEnvFor(env) {
  dotenv.config({ path: `.env.${env}` });
  console.log(`[Vehicle] –ó–∞–≥—Ä—É–∂–µ–Ω .env.${env}, VEHICLE_BASE_URL:`, process.env.VEHICLE_BASE_URL);
}

const VEHICLES_DIR = path.join(__dirname, 'vehicles');
const DELAY_MS = 1000;

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
function calculateDistance(point1, point2) {
  const R = 6371e3; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const œÜ1 = point1.lat * Math.PI / 180;
  const œÜ2 = point2.lat * Math.PI / 180;
  const ŒîœÜ = (point2.lat - point1.lat) * Math.PI / 180;
  const ŒîŒª = (point2.lon - point1.lon) * Math.PI / 180;

  const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
            Math.cos(œÜ1) * Math.cos(œÜ2) *
            Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

  return R * c; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É—á—ë—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
function interpolateCoordinates(waypoints, speedMps, intervalMs = 1000) {
  if (!waypoints || waypoints.length < 2) {
    return waypoints;
  }

  const interpolatedCoords = [];
  
  for (let i = 0; i < waypoints.length - 1; i++) {
    const start = waypoints[i];
    const end = waypoints[i + 1];
    
    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const distance = calculateDistance(start, end);
    
    // –í—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const timeNeeded = distance / speedMps;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const steps = Math.ceil(timeNeeded / (intervalMs / 1000));
    
    console.log(`üîÑ [Interpolation] –£—á–∞—Å—Ç–æ–∫ ${i+1}: ${distance.toFixed(1)}–º, ${timeNeeded.toFixed(1)}—Å, ${steps} —à–∞–≥–æ–≤`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    if (i === 0) {
      interpolatedCoords.push(start);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    for (let j = 1; j <= steps; j++) {
      const ratio = j / steps;
      const lat = start.lat + (end.lat - start.lat) * ratio;
      const lon = start.lon + (end.lon - start.lon) * ratio;
      
      interpolatedCoords.push({ lat, lon });
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
  interpolatedCoords.push(waypoints[waypoints.length - 1]);
  
  console.log(`üìä [Interpolation] –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: ${waypoints.length}, –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${interpolatedCoords.length}`);
  
  return interpolatedCoords;
}

class Vehicle {
  constructor(client, env = 'dev', options = {}) {
    loadEnvFor(env);
    console.log(`[Vehicle ${client}] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, env: ${env}, VEHICLE_BASE_URL:`, process.env.VEHICLE_BASE_URL);
    this.client = client;
    this.env = env;
    this.duration = options.duration || 300; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    this.delay = options.delay || DELAY_MS;
    this.speed = options.speed || 10; // —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º/—Å (36 –∫–º/—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    this.customCoords = options.customCoords || null; // –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    this.interpolate = options.interpolate !== false; // –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.isRunning = false;
  }

  async sendCoordinate({ lat, lon }) {
    const navigation_time = moment().format('YYYY-MM-DDTHH:mm:ss+02:00');

    const payload = {
      telemetry: [
        {
          client: this.clientId, // –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ñ–∞–π–ª–∞
          navigation_time,
          latitude: lat,
          longitude: lon,
          moving: true,
          distance: 1930,
          nsat: 3,
          pdop: 4,
          speed: Math.round(this.speed * 3.6) // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º/—Å –≤ –∫–º/—á
        }
      ]
    };

    console.log(`üì§ [${this.client}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: (${lat.toFixed(8)}, ${lon.toFixed(8)})`);

    try {
      const response = await axios.post(process.env.BASE_URL_CONNECTOR + '/debug/locations/vehicle', payload);
      console.log(`‚úÖ [${this.client}] (${lat.toFixed(8)}, ${lon.toFixed(8)}) => ${response.status}`);
      return { success: true, status: response.status };
    } catch (err) {
      console.error(`‚ùå [${this.client}] (${lat.toFixed(8)}, ${lon.toFixed(8)}) => ${err.message}`);
      return { success: false, error: err.message };
    }
  }

  async run() {
    console.log(`[Vehicle ${this.client}] run(), BASE_URL_CONNECTOR:`, process.env.BASE_URL_CONNECTOR);
    const baseUrl = process.env.BASE_URL_CONNECTOR;
    if (!baseUrl) {
      console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BASE_URL_CONNECTOR –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "${this.client}"`);
      return Promise.reject(new Error('–ù–µ –Ω–∞–π–¥–µ–Ω BASE_URL_CONNECTOR'));
    }
    const vehicleBaseUrl = `${baseUrl}/debug/locations/vehicle`;

    let coords;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (this.customCoords) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (Array.isArray(this.customCoords)) {
        // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π client ID
        console.log(`üöÄ [${this.client}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, waypoints: ${this.customCoords.length}`);
        this.clientId = 999999; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ID –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ [lon, lat] –≤ {lat, lon}
        const convertedCoords = this.customCoords.map(coord => {
          if (Array.isArray(coord) && coord.length === 2) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: [lon, lat] –∏–ª–∏ [lat, lon]
            const first = coord[0];
            const second = coord[1];
            
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 90, —Ç–æ —ç—Ç–æ –¥–æ–ª–≥–æ—Ç–∞ (lon), –∏–Ω–∞—á–µ —à–∏—Ä–æ—Ç–∞ (lat)
            if (Math.abs(first) > 90) {
              // –§–æ—Ä–º–∞—Ç [lon, lat] - –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
              return { lon: first, lat: second };
            } else {
              // –§–æ—Ä–º–∞—Ç [lat, lon] - —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
              return { lat: first, lon: second };
            }
          } else if (coord.lat && coord.lon) {
            return coord; // —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          } else {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${JSON.stringify(coord)}. –û–∂–∏–¥–∞–µ—Ç—Å—è [lon, lat], [lat, lon] –∏–ª–∏ {lat, lon}`);
          }
        });
        
        if (this.interpolate) {
          coords = interpolateCoordinates(convertedCoords, this.speed, this.delay);
          console.log(`üîÑ [Vehicle] –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: ${convertedCoords.length} waypoints ‚Üí ${coords.length} —Ç–æ—á–µ–∫`);
        } else {
          coords = convertedCoords;
          console.log(`üìç [Vehicle] –ë–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: ${coords.length} waypoints`);
        }
      } else if (this.customCoords.coords && this.customCoords.client) {
        // –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ client ID
        console.log(`üöÄ [${this.client}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å client ID: ${this.customCoords.client}, waypoints: ${this.customCoords.coords.length}`);
        this.clientId = this.customCoords.client;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (this.customCoords.speed !== undefined) {
          this.speed = this.customCoords.speed;
          console.log(`‚ö° [${this.client}] –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${this.speed} –º/—Å (${Math.round(this.speed * 3.6)} –∫–º/—á)`);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (this.customCoords.interpolate !== undefined) {
          this.interpolate = this.customCoords.interpolate;
          console.log(`üîÑ [${this.client}] –ö–∞—Å—Ç–æ–º–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: ${this.interpolate}`);
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ [lon, lat] –≤ {lat, lon}
        const convertedCoords = this.customCoords.coords.map(coord => {
          if (Array.isArray(coord) && coord.length === 2) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: [lon, lat] –∏–ª–∏ [lat, lon]
            const first = coord[0];
            const second = coord[1];
            
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 90, —Ç–æ —ç—Ç–æ –¥–æ–ª–≥–æ—Ç–∞ (lon), –∏–Ω–∞—á–µ —à–∏—Ä–æ—Ç–∞ (lat)
            if (Math.abs(first) > 90) {
              // –§–æ—Ä–º–∞—Ç [lon, lat] - –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
              return { lon: first, lat: second };
            } else {
              // –§–æ—Ä–º–∞—Ç [lat, lon] - —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
              return { lat: first, lon: second };
            }
          } else if (coord.lat && coord.lon) {
            return coord; // —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          } else {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${JSON.stringify(coord)}. –û–∂–∏–¥–∞–µ—Ç—Å—è [lon, lat], [lat, lon] –∏–ª–∏ {lat, lon}`);
          }
        });
        
        if (this.interpolate) {
          coords = interpolateCoordinates(convertedCoords, this.speed, this.delay);
          console.log(`üîÑ [Vehicle] –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: ${convertedCoords.length} waypoints ‚Üí ${coords.length} —Ç–æ—á–µ–∫`);
        } else {
          coords = convertedCoords;
          console.log(`üìç [Vehicle] –ë–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: ${coords.length} waypoints`);
        }
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç {coords: [...], client: number}');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      console.log(`‚ö° [${this.client}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å: ${this.speed} –º/—Å (${(this.speed * 3.6).toFixed(1)} –∫–º/—á)`);
      console.log(`üìä [${this.client}] –ü–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${coords.length}`);
      
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
      const clientNum = this.client.toString().padStart(2, '0');
      const filePath = path.join(__dirname, `vehicles_${this.env}`, `vehicle_${clientNum}.json`);
      
      try {
        const content = await fs.readFile(filePath, 'utf8');
        const data = JSON.parse(content);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
        this.clientId = data.client;
        if (!this.clientId) {
          throw new Error('–ü–æ–ª–µ "client" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ JSON —Ñ–∞–π–ª–µ');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (waypoints)
        const waypoints = data.coords || data;
        console.log(`üöÄ [${this.client}] –ó–∞–ø—É—Å–∫, ID –∫–ª–∏–µ–Ω—Ç–∞: ${this.clientId}, waypoints: ${waypoints.length}`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const convertedWaypoints = waypoints.map(coord => {
          if (Array.isArray(coord) && coord.length === 2) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: [lon, lat] –∏–ª–∏ [lat, lon]
            const first = coord[0];
            const second = coord[1];
            
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 90, —Ç–æ —ç—Ç–æ –¥–æ–ª–≥–æ—Ç–∞ (lon), –∏–Ω–∞—á–µ —à–∏—Ä–æ—Ç–∞ (lat)
            if (Math.abs(first) > 90) {
              // –§–æ—Ä–º–∞—Ç [lon, lat] - –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
              return { lon: first, lat: second };
            } else {
              // –§–æ—Ä–º–∞—Ç [lat, lon] - —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
              return { lat: first, lon: second };
            }
          } else if (coord.lat && coord.lon) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: {lat, lon}
            return coord;
          } else {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${JSON.stringify(coord)}. –û–∂–∏–¥–∞–µ—Ç—Å—è [lon, lat], [lat, lon] –∏–ª–∏ {lat, lon}`);
          }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const fileSpeed = data.speed;
        if (fileSpeed !== undefined && this.speed === 10) { // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
          this.speed = fileSpeed;
          console.log(`‚ö° [${this.client}] –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑ —Ñ–∞–π–ª–∞: ${this.speed} –º/—Å (${(this.speed * 3.6).toFixed(1)} –∫–º/—á)`);
        } else {
          console.log(`‚ö° [${this.client}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å: ${this.speed} –º/—Å (${(this.speed * 3.6).toFixed(1)} –∫–º/—á)`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (this.interpolate) {
          coords = interpolateCoordinates(convertedWaypoints, this.speed, this.delay);
          console.log(`üîÑ [Vehicle] –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: ${convertedWaypoints.length} waypoints ‚Üí ${coords.length} —Ç–æ—á–µ–∫`);
        } else {
          coords = convertedWaypoints;
          console.log(`üìç [Vehicle] –ë–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: ${coords.length} waypoints`);
        }
        
      } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${filePath}: ${err.message}`);
        return Promise.reject(err);
      }
    }

    return new Promise((resolve) => {
      this.isRunning = true;
      const startTime = Date.now();
      const maxDuration = this.duration * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      let index = 0;
      let results = [];

      const sendNext = async () => {
        if (!this.isRunning) {
          resolve(results);
          return;
        }

        if (Date.now() - startTime >= maxDuration) {
          console.log(`‚è∞ [${this.client}] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Ç–µ–∫–ª–∞ (${this.duration}—Å), –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É`);
          this.isRunning = false;
          resolve(results);
          return;
        }

        const coord = coords[index];
        if (!coord || typeof coord.lat === 'undefined' || typeof coord.lon === 'undefined') {
          console.error(`‚ùå [${this.client}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É ${index}:`, coord);
          index = (index + 1) % coords.length;
          setTimeout(sendNext, this.delay);
          return;
        }
        console.log(`üîÑ [${this.client}] –ò–Ω–¥–µ–∫—Å: ${index}/${coords.length}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞: (${coord.lat.toFixed(8)}, ${coord.lon.toFixed(8)})`);
        const result = await this.sendCoordinate(coord);
        results.push(result);
        
        index = (index + 1) % coords.length;
        
        setTimeout(sendNext, this.delay);
      };

      sendNext();
    });
  }

  stop() {
    this.isRunning = false;
    console.log(`‚èπÔ∏è [${this.client}] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }
}

if (require.main === module) {
  const client = process.argv[2];
  const env = process.env.ENV || 'dev';
  
  if (!client) {
    console.error('‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: node vehicle.js client1');
    process.exit(1);
  }

  const vehicle = new Vehicle(client, env);
  vehicle.run().catch(err => {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    process.exit(1);
  });
}

module.exports = { Vehicle, interpolateCoordinates, calculateDistance, delay };
